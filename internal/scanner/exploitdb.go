package scanner

import (
	"encoding/csv"
	"fmt"
	"os"
	"strings"
)

// ExploitDBRecord represents a CVE record from ExploitDB CSV format
type ExploitDBRecord struct {
	CVEID       string
	Description string
	Port        string
}

// FetchExploitDBData fetches CVE data from ExploitDB CSV file
func FetchExploitDBData(csvFilePath string, ports []string) error {
	file, err := os.Open(csvFilePath)
	if err != nil {
		return fmt.Errorf("failed to open ExploitDB CSV file: %w", err)
	}
	defer file.Close()

	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		return fmt.Errorf("failed to read CSV data: %w", err)
	}

	// Loop through the records and check if ports match
	for _, record := range records {
		cve := ExploitDBRecord{
			CVEID:       record[0], // CVE ID
			Description: record[1], // CVE Description
			Port:        record[2], // Port affected by CVE
		}

		// Check if the CVE applies to any of the ports
		for _, port := range ports {
			if strings.Contains(cve.Port, port) {
				fmt.Printf("ExploitDB CVE ID: %s | Description: %s | Port: %s\n", cve.CVEID, cve.Description, cve.Port)
			}
		}
	}

	return nil
}
